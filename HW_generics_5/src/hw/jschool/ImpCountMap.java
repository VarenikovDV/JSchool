package hw.jschool;

import java.util.*;

public class ImpCountMap<K>implements CountMap<K> {
/*********************************************************************************************************************/

/*********************************************************************************************************************/
    //private class Node<K,T> extends AbstractMap.SimpleEntry<K.T>(

/*********************************************************************************************************************/
    private HashMap<K,Integer> map= new HashMap<>();

    ///AbstractMap.SimpleEntry<K,T> tr= new AbstractMap.SimpleEntry<K,T>(null,null).;
    //tr.

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
    @Override
    public void add(K k) {
        // добавляет элемент в этот контейнер.
        map.put(k,map.get(k)+1);
    }
/*********************************************************************************************************************/
    @Override
    public int getCount(K k) {
        //Возвращает количество добавлений данного элемента
        return map.get(k);
    }
/*********************************************************************************************************************/
    @Override
    public int remove(K k) {
        //Удаляет элемент из контейнера и возвращает количество его добавлений(до удаления)
        return map.remove(k);
    }
/*********************************************************************************************************************/
    @Override
    public int size() {
        //количество разных элементов
        return map.size();
    }
/*********************************************************************************************************************/
    @Override
    public void addAll(Map<? extends K, ? extends Integer> m) {
        //Добавить все элементы из source в текущий контейнер, при совпадении ключей,     суммировать значения
        map.putAll(m);
    }
/*********************************************************************************************************************/
    @Override
    public Map<K, Integer> toMap() {
        //Вернуть java.util.Map. ключ - добавленный элемент, значение - количество его добавлений
        return new HashMap<K,Integer>(map);
    }
/*********************************************************************************************************************/
    @Override
    public void toMap(Map<? super K, ? super Integer> m) {
        //Тот же самый контракт как и toMap(), только всю информацию записать в destination
        m.putAll(map);
    }
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/


}
